import sys
import requests
import pandas as pd
import sqlalchemy
import psycopg2
from dotenv import load_dotenv
import xml.etree.ElementTree as ET
import os, time, json, smtplib
from datetime import date, datetime
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from azure.identity import ClientSecretCredential
from azure.keyvault.secrets import SecretClient

print("üîç Testando depend√™ncias...")

try:
    r = requests.get("https://httpbin.org/get")
    print("‚úÖ requests ok:", r.status_code)
except Exception as e:
    print("‚ùå requests falhou:", e)

try:
    df = pd.DataFrame({"a": [1, 2], "b": [3, 4]})
    print("‚úÖ pandas ok:", df.head(1).to_dict())
except Exception as e:
    print("‚ùå pandas falhou:", e)

try:
    engine = sqlalchemy.create_engine("sqlite:///:memory:")
    with engine.connect() as conn:
        conn.execute(sqlalchemy.text("SELECT 1"))
    print("‚úÖ sqlalchemy ok (sqlite)")
except Exception as e:
    print("‚ùå sqlalchemy falhou:", e)

try:
    # Apenas o import √© suficiente para o teste
    print("‚úÖ psycopg2-binary ok (importado)")
except Exception as e:
    print("‚ùå psycopg2-binary falhou:", e)

try:
    # Apenas o import √© suficiente para o teste
    print("‚úÖ python-dotenv ok (importado)")
except Exception as e:
    print("‚ùå python-dotenv falhou:", e)

try:
    ET.Element("root")
    print("‚úÖ xml.etree.ElementTree ok")
except Exception as e:
    print("‚ùå xml.etree.ElementTree falhou:", e)

try:
    # Apenas os imports s√£o suficientes para o teste
    print("‚úÖ m√≥dulos padr√£o (os, time, json, email, etc) ok")
except Exception as e:
    print("‚ùå m√≥dulos padr√£o falharam:", e)

try:
    # Apenas os imports s√£o suficientes para o teste
    print("‚úÖ azure.identity e azure.keyvault-secrets ok (importados)")
except Exception as e:
    print("‚ùå azure libs falharam:", e)

print("\nüöÄ Teste finalizado.")
